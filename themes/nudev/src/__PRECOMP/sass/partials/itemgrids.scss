/**
 * partials/itemgrids
 * ---
 *
 */

// calculate the width of each column based on content area width and number of columns
 @function calculatecolumn($c,$w){
   @return (($w - (2vw * ($c - 1))) / $c);
 }





// this is for adding any filtering that we might be doing for this grid of items
@mixin showfilters(){

  & > div > input[type=checkbox]{
    position: absolute;
    display: none;
    width: 100%;
    height: 100%;
    opacity: 0.0;
    &:hover,
    &:focus{
      cursor: pointer;
    }
  }

  & > div > ul.nu__grid-filters-options{
    width: 100%;
    border-bottom: solid rgba($brand_colors-grayW,1.0) 2px;
    margin: 0 0 0 0;
    display: flex;
    flex-direction: row;
    flex-wrap: wrap;
    & > li{
      flex-basis: auto;
      text-align: center;
      margin: 0 10px 10px 0;
      & > a{
        padding: 0 20px 12px 20px;
        color: rgba($brand_colors-black,0.7);
        text-transform: uppercase;
        @include font-1r-l;
        text-align: center;
        & > span{
          display: none;
          @include font-4-c;
          font-weight: normal;
          height: 18px;
          overflow: hidden;
          margin: 15px 0 0 0;
        }
        &.active{
          @include font-1b-l;
          text-align: center;
          color: rgba($brand_colors-black,1.0);
          border-bottom: solid rgba($brand_colors-red,1.0) 4px;
        }
        &:hover,
        &:focus{
          color: rgba($brand_colors-black,1.0);
          border-bottom: solid rgba($brand_colors-red,1.0) 4px;
        }
      }
      &:last-of-type{
        margin: 0 0 10px 0;
      }
    }
  }


  @media only screen and (max-width: 960px) {

    ul.nu__grid-filters-options{
      & > li{
        margin: 0 0 10px 0;
        & > a{
          padding: 0 10px 11px 10px;
        }
      }
    }
  }


  @media only screen and (max-width: 768px) {

    & > div > input[type=checkbox]{
      position: absolute;
      display: block;
      width: 100%;
      height: 100%;
      opacity: 0.0;
      &:hover{
        cursor: pointer;
      }
      &:checked{
        display: none;
         &+ul{
           height: auto;
           & > li{
             & > a{
               display: block;
             }
           }
         }
      }
    }

    & > div > ul.nu__grid-filters-options{
      border-bottom: none;
      display: block;
      height: 100px;
      overflow: hidden;
      & > li{
        flex: none;
        margin: 0 0 10px 0;
        & > a{
          display: none;
          border-bottom: solid rgba($brand_colors-red,0.0) 4px;
          &.active{
            border-bottom: solid rgba($brand_colors-red,1.0) 4px;
            display: block;
            & > span{
              display: inline-block;
            }
          }
          &:hover{
            border-bottom: solid rgba($brand_colors-red,1.0) 4px;
          }
        }
      }
    }
  }


}





// this will actually add a grid to a page, pass in the width it should be
@mixin addgrid($w,$c,$g,$class:''){

  $colW: calculatecolumn($c,$w);



  margin: 0 auto 0 auto;
  flex-direction: row;
  flex-wrap: wrap;
  & > li{
    width: $colW;
    flex-basis: $colW;
    min-height: $colW;
    margin: 0 #{$g} #{$g} 0;
    flex-grow: 0;



    // need to dynamically reset the margins etc. for any column count ABOVE the one passed, to max of 100 just to be safe?
    @for $i from $c through 100 {
        &:nth-child(#{$i}n+#{$i}){
          margin: 0 #{$g} 10px 0;
        }
    }



    &:nth-child(#{$c}n+#{$c}){
      margin: 0 0 #{$g} 0;
    }
    & > div{
      height: $colW;
      width: 100%;
      background: rgba($brand_colors-grayW,1.0);
      background-position: center center !important;
      background-repeat: no-repeat !important;
      background-size: cover !important;
    }
    & > p{
      width: 100%;
      @include font-2r-l;
      line-height: 2.2rem;
      margin: 10px 0 0 0;
      & > span{
        @include font-2b-l;
        line-height: 2.2rem;
      }
    }
  }
}
